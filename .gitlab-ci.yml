# This file is a template, and might need editing before it works on your project.
# Official framework image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/php
image: php:7.4

# Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: http://docs.gitlab.com/ee/ci/docker/using_docker_images.html#what-is-a-service
services:
  - postgres:13-alpine
  - redis:latest

variables:
  POSTGRES_USER: iam_db_dev
  POSTGRES_PASSWORD: iam_db_dev
  POSTGRES_DB: iam_db_dev

# This folder is cached between builds
# http://docs.gitlab.com/ee/ci/yaml/README.html#cache
cache:
  paths:
    - vendor/
    - node_modules/

# This is a basic example for a gem or script which doesn't use
# services such as redis or postgres
before_script:
  # Update packages
  - apt-get update -yqq
  # Prep for Node
  - apt-get install gnupg -yqq
  # Upgrade to Node 8
  - curl -sL https://deb.nodesource.com/setup_15.x | bash -
  # Install dependencies
  - apt-get install git nodejs libcurl4-gnutls-dev libicu-dev libonig-dev libmcrypt-dev libvpx-dev libjpeg-dev libpng-dev libxpm-dev zlib1g-dev libfreetype6-dev libxml2-dev libexpat1-dev libbz2-dev libgmp3-dev libldap2-dev unixodbc-dev libpq-dev libsqlite3-dev libaspell-dev libsnmp-dev libpcre3-dev libtidy-dev -yqq
  # Install php extensions
  - docker-php-ext-install pdo_pgsql
  # Install & enable Xdebug for code coverage reports
  - curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
  - echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list
  - apt-get update && apt-get install yarn
  - pecl install xdebug
  - docker-php-ext-enable xdebug
  # Install Composer and project dependencies.
  - curl -sS https://getcomposer.org/installer | php
  - curl -sS https://get.symfony.com/cli/installer | bash
  - export PATH="$HOME/.symfony/bin:$PATH"
  - symfony composer install
  # Install Node dependencies.
  # comment this out if you don't have a node dependency
  - npm install
  # Copy over testing configuration.
  # Don't forget to set the database config in .env.testing correctly
  # DB_HOST=mysql
  # DB_DATABASE=project_name
  # DB_USERNAME=root
  # DB_PASSWORD=secret
#  - cp .env.testing .env
  # Run npm build
  # comment this out if you don't have a frontend build
  # you can change this to to your frontend building script like
  # npm run build
#  - npm run dev
  # Generate an application key. Re-cache.
#  - php artisan key:generate
#  - php artisan config:cache
#  # Run database migrations.
#  - php artisan migrate
#  # Run database seed
#  - php artisan db:seed
  - symfony console doctrine:schema:create
  - symfony console doctrine:fixtures:load --no-interaction
  - symfony serve -d

test:
  script:
    # run laravel tests
    - php bin/phpunit
    # run frontend tests
    # if you have any task for testing frontend
    # set it in your package.json script
    # comment this out if you don't have a frontend test
    - npm test
