# This file is a template, and might need editing before it works on your project.
# Official framework image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/php
image: php:8

stages:
  - test
  - deploy

# Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: http://docs.gitlab.com/ee/ci/docker/using_docker_images.html#what-is-a-service
services:
  - name: postgres:13-alpine
    alias: database
  - redis:latest

variables:
  POSTGRES_USER: db_user
  POSTGRES_PASSWORD: db_pass
  POSTGRES_DB: db_name

# This folder is cached between builds
# http://docs.gitlab.com/ee/ci/yaml/README.html#cache
cache:
  paths:
    - vendor/
    - node_modules/

test:
  # This is a basic example for a gem or script which doesn't use
  # services such as redis or postgres
  before_script:
    # Update packages
    - apt-get update -yqq
    # Generate private and public key for JWT token
    - apt-get install gnupg openssl acl -yqq
    - mkdir -p config/jwt
    - export jwt_passphrase=${JWT_PASSPHRASE:-$(grep ''^JWT_PASSPHRASE='' .env | cut -f 2 -d ''='')}
    - echo "$jwt_passphrase" | openssl genpkey -out config/jwt/private.pem -aes256 -algorithm rsa -pkeyopt rsa_keygen_bits:4096 --pass stdin
    - echo "$jwt_passphrase" | openssl pkey -in config/jwt/private.pem -out config/jwt/public.pem -pubout --passin stdin
    - setfacl -R -m u:www-data:rX -m u:"$(whoami)":rwX config/jwt
    - setfacl -dR -m u:www-data:rX -m u:"$(whoami)":rwX config/jwt
    # Upgrade to Node 15
    - curl -sL https://deb.nodesource.com/setup_15.x | bash -
    # Install dependencies
    - apt-get install git nodejs unzip libcurl4-gnutls-dev libicu-dev libonig-dev libzip-dev libmcrypt-dev libvpx-dev libjpeg-dev libpng-dev libxpm-dev zlib1g-dev libfreetype6-dev libxml2-dev libexpat1-dev libbz2-dev libgmp3-dev libldap2-dev unixodbc-dev libpq-dev libsqlite3-dev libaspell-dev libsnmp-dev libpcre3-dev libtidy-dev -yqq
    # Install php extensions
    - docker-php-ext-install pdo_pgsql zip
    # Install & enable Xdebug for code coverage reports
    - curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
    - echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list
    - apt-get update && apt-get install yarn
    - pecl install xdebug
    - docker-php-ext-enable xdebug
    # Install Composer and project dependencies.
    - curl -sS https://getcomposer.org/installer | php
    - curl -sS https://get.symfony.com/cli/installer | bash
    - export PATH="$HOME/.symfony/bin:$PATH"
    - symfony composer install
    # Install Node dependencies.
    # comment this out if you don't have a node dependency
    - npm install
    # Generate an application key. Re-cache.
    - symfony console doctrine:schema:create
    - symfony console doctrine:fixtures:load --no-interaction
    - symfony server:ca:install
    - symfony serve -d
  script:
    # run unit tests
    - php bin/phpunit
    # run frontend tests
    # if you have any task for testing frontend
    # set it in your package.json script
    # comment this out if you don't have a frontend test
#    - npm test

deploy:
  image: ubuntu:latest
  stage: deploy
  before_script:
    - 'command -v ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    - pwd
    - ssh $SERVER "cd $DIR_PATH; killall -9 php; git pull; $PHP --version; $COMPOSER install; $PHP bin/console make:migration; $PHP bin/console doctrine:migrations:migrate --no-interaction; nohup $PHP -S localhost:8088 -t public/ & ; exit;"
  only:
    - master
